(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{147:function(s,t,n){"use strict";n.r(t);var a=n(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"linux-进程后台运行的几种方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#linux-进程后台运行的几种方法","aria-hidden":"true"}},[s._v("#")]),s._v(" linux 进程后台运行的几种方法")]),s._v(" "),n("p",[s._v("我们经常会碰到这样的问题，用 telnet/ssh 登录了远程的 Linux 服务器，运行了一些耗时较长的任务， 结果却由于网络的不稳定导致任务中途失败。如何让命令提交后不受本地关闭终端窗口/网络断开连接的干扰呢？下面举了一些例子， 您可以针对不同的场景选择不同的方式来处理这个问题。")]),s._v(" "),n("p",[s._v("场景：\n如果只是临时有一个命令需要长时间运行，什么方法能最简便的保证它在后台稳定运行呢？")]),s._v(" "),n("blockquote",[n("p",[s._v("hangup 名称的来由")])]),s._v(" "),n("p",[s._v("在 Unix 的早期版本中，每个终端都会通过 modem 和系统通讯。当用户 logout 时，modem 就会挂断（hang up）电话。 同理，当 modem 断开连接时，就会给终端发送 hangup 信号来通知其关闭所有子进程。")]),s._v(" "),n("p",[s._v("解决方法：\n我们知道，当用户注销（logout）或者网络断开时，终端会收到 HUP（hangup）信号从而关闭其所有子进程。因此，我们的解决办法就有两种途径：要么让进程忽略 HUP 信号，要么让进程运行在新的会话里从而成为不属于此终端的子进程。")]),s._v(" "),n("h2",{attrs:{id:"nohup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nohup","aria-hidden":"true"}},[s._v("#")]),s._v(" nohup")]),s._v(" "),n("p",[s._v("nohup 无疑是我们首先想到的办法。顾名思义，nohup 的用途就是让提交的命令忽略 hangup 信号。让我们先来看一下 nohup 的帮助信息：")]),s._v(" "),n("p",[n("code",[s._v("NOHUP(1) User Commands NOHUP(1)NAME nohup - run a command immune to hangups, with output to a non-ttySYNOPSIS nohup COMMAND [ARG]... nohup OPTIONDESCRIPTION Run COMMAND, ignoring hangup signals. --help display this help and exit --version output version information and exit")])]),s._v(" "),n("p",[s._v('可见，nohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上"&"来将命令同时放入后台运行，也可用">filename 2>&1"来更改缺省的重定向文件名。')]),s._v(" "),n("h3",{attrs:{id:"nohup-示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nohup-示例","aria-hidden":"true"}},[s._v("#")]),s._v(" nohup 示例")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# nohup ping www.ibm.com &")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 3059 nohup: appending output to `nohup.out'\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# ps -ef |grep 3059")]),s._v("\nroot 3059 984 0 21:06 pts/3 00:00:00 "),n("span",{attrs:{class:"token function"}},[s._v("ping")]),s._v(" www.ibm.com\nroot 3067 984 0 21:06 pts/3 00:00:00 "),n("span",{attrs:{class:"token function"}},[s._v("grep")]),s._v(" 3059\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"setsid"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setsid","aria-hidden":"true"}},[s._v("#")]),s._v(" setsid")]),s._v(" "),n("p",[s._v("nohup 无疑能通过忽略 HUP 信号来使我们的进程避免中途被中断，但如果我们换个角度思考，如果我们的进程不属于接受 HUP 信号的终端的子进程，那么自然也就不会受到 HUP 信号的影响了。setsid 就能帮助我们做到这一点。让我们先来看一下 setsid 的帮助信息：")]),s._v(" "),n("p",[n("code",[s._v("SETSID(8) Linux Programmer’s Manual SETSID(8)NAME setsid - run a program in a new sessionSYNOPSIS setsid program [ arg ... ]DESCRIPTION setsid runs a program in a new session.")])]),s._v(" "),n("p",[s._v("可见 setsid 的使用也是非常方便的，也只需在要处理的命令前加上 setsid 即可。")]),s._v(" "),n("h3",{attrs:{id:"setsid-示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setsid-示例","aria-hidden":"true"}},[s._v("#")]),s._v(" setsid 示例")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# setsid ping www.ibm.com")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# ps -ef |grep www.ibm.com")]),s._v("\nroot 31094 1 0 07:28 ? 00:00:00 "),n("span",{attrs:{class:"token function"}},[s._v("ping")]),s._v(" www.ibm.com\nroot 31102 29217 0 07:29 pts/4 00:00:00 "),n("span",{attrs:{class:"token function"}},[s._v("grep")]),s._v(" www.ibm.com\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("值得注意的是，上例中我们的进程 ID(PID)为 31094，而它的父 ID（PPID）为 1（即为 init 进程 ID），并不是当前终端的进程 ID。请将此例与 nohup 例中的父 ID 做比较。")]),s._v(" "),n("h2",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[s._v("#")]),s._v(" &")]),s._v(" "),n("p",[s._v('这里还有一个关于 subshell 的小技巧。我们知道，将一个或多个命名包含在“()”中就能让这些命令在子 shell 中运行中，从而扩展出很多有趣的功能，我们现在要讨论的就是其中之一。\n当我们将"&"也放入“()”内之后，我们就会发现所提交的作业并不在作业列表中，也就是说，是无法通过 jobs 来查看的。让我们来看看为什么这样就能躲过 HUP 信号的影响吧。')]),s._v(" "),n("h3",{attrs:{id:"subshell-示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subshell-示例","aria-hidden":"true"}},[s._v("#")]),s._v(" subshell 示例")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# (ping www.ibm.com &)")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# ps -ef |grep www.ibm.com")]),s._v("\nroot 16270 1 0 14:13 pts/4 00:00:00 "),n("span",{attrs:{class:"token function"}},[s._v("ping")]),s._v(" www.ibm.com\nroot 16278 15362 0 14:13 pts/4 00:00:00 "),n("span",{attrs:{class:"token function"}},[s._v("grep")]),s._v(" www.ibm.com\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("从上例中可以看出，新提交的进程的父 ID（PPID）为 1（init 进程的 PID），并不是当前终端的进程 ID。因此并不属于当前终端的子进程，从而也就不会受到当前终端的 HUP 信号的影响了。")]),s._v(" "),n("h2",{attrs:{id:"disown"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#disown","aria-hidden":"true"}},[s._v("#")]),s._v(" disown")]),s._v(" "),n("p",[s._v("场景：\n我们已经知道，如果事先在命令前加上 nohup 或者 setsid 就可以避免 HUP 信号的影响。但是如果我们未加任何处理就已经提交了命令，该如何补救才能让它避免 HUP 信号的影响呢？")]),s._v(" "),n("p",[s._v("解决方法：这时想加 nohup 或者 setsid 已经为时已晚，只能通过作业调度和 disown 来解决这个问题了。让我们来看一下 disown 的帮助信息：")]),s._v(" "),n("p",[n("code",[s._v("disown [-ar][-h] [jobspec ...] Without options, each jobspec is removed from the table of active jobs. If the -h option is given, each jobspec is not removed from the table, but is marked so that SIGHUP is not sent to the job if the shell receives a SIGHUP. If no jobspec is present, and neither the -a nor the -r option is supplied, the current job is used. If no jobspec is supplied, the -a option means to remove or mark all jobs; the -r option without a jobspec argument restricts operation to running jobs. The return value is 0 unless a jobspec does not specify a valid job.")])]),s._v(" "),n("p",[s._v("可以看出，我们可以用如下方式来达成我们的目的。")]),s._v(" "),n("p",[s._v("灵活运用 CTRL-z\n在我们的日常工作中，我们可以用 CTRL-z 来将当前进程挂起到后台暂停运行，执行一些别的操作，然后再用 fg 来将挂起的进程重新放回前台（也可用 bg 来将挂起的进程放在后台）继续运行。这样我们就可以在一个终端内灵活切换运行多个任务，这一点在调试代码时尤为有用。因为将代码编辑器挂起到后台再重新放回时，光标定位仍然停留在上次挂起时的位置，避免了重新定位的麻烦。")]),s._v(" "),n("p",[s._v("● 用 disown -h jobspec 来使某个作业忽略 HUP 信号。\n● 用 disown -ah 来使所有的作业都忽略 HUP 信号。\n● 用 disown -rh 来使正在运行的作业忽略 HUP 信号。")]),s._v(" "),n("p",[s._v('需要注意的是，当使用过 disown 之后，会将把目标作业从作业列表中移除，我们将不能再使用 jobs 来查看它，但是依然能够用 ps -ef 查找到它。\n但是还有一个问题，这种方法的操作对象是作业，如果我们在运行命令时在结尾加了"&"来使它成为一个作业并在后台运行，那么就万事大吉了，我们可以通过 jobs 命令来得到所有作业的列表。但是如果并没有把当前命令作为作业来运行，如何才能得到它的作业号呢？答案就是用 CTRL-z（按住 Ctrl 键的同时按住 z 键）了！\nCTRL-z 的用途就是将当前进程挂起（Suspend），然后我们就可以用 jobs 命令来查询它的作业号，再用 bg jobspec 来将它放入后台并继续运行。需要注意的是，如果挂起会影响当前进程的运行结果，请慎用此方法。')]),s._v(" "),n("h3",{attrs:{id:"disown-示例-1（如果提交命令时已经用“-”将命令放入后台运行，则可以直接使用“disown”）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#disown-示例-1（如果提交命令时已经用“-”将命令放入后台运行，则可以直接使用“disown”）","aria-hidden":"true"}},[s._v("#")]),s._v(" disown 示例 1（如果提交命令时已经用“&”将命令放入后台运行，则可以直接使用“disown”）")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# cp -r testLargeFile largeFile &")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 4825\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# jobs")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+ Running "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" -i -r testLargeFile largeFile "),n("span",{attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# disown -h %1")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# ps -ef |grep largeFile")]),s._v("\nroot 4825 968 1 09:46 pts/4 00:00:00 "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" -i -r testLargeFile largeFile\nroot 4853 968 0 09:46 pts/4 00:00:00 "),n("span",{attrs:{class:"token function"}},[s._v("grep")]),s._v(" largeFile\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# logout")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"disown-示例-2（如果提交命令时未使用“-”将命令放入后台运行，可使用-ctrl-z-和“bg”将其放入后台，再使用“disown”）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#disown-示例-2（如果提交命令时未使用“-”将命令放入后台运行，可使用-ctrl-z-和“bg”将其放入后台，再使用“disown”）","aria-hidden":"true"}},[s._v("#")]),s._v(" disown 示例 2（如果提交命令时未使用“&”将命令放入后台运行，可使用 CTRL-z 和“bg”将其放入后台，再使用“disown”）")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# cp -r testLargeFile largeFile2")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+ Stopped "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" -i -r testLargeFile largeFile2\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# bg %1")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+ "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" -i -r testLargeFile largeFile2 "),n("span",{attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# jobs")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+ Running "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" -i -r testLargeFile largeFile2 "),n("span",{attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# disown -h %1")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# ps -ef |grep largeFile2")]),s._v("\nroot 5790 5577 1 10:04 pts/3 00:00:00 "),n("span",{attrs:{class:"token function"}},[s._v("cp")]),s._v(" -i -r testLargeFile largeFile2\nroot 5824 5577 0 10:05 pts/3 00:00:00 "),n("span",{attrs:{class:"token function"}},[s._v("grep")]),s._v(" largeFile2\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 build"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("#")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"screen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#screen","aria-hidden":"true"}},[s._v("#")]),s._v(" screen")]),s._v(" "),n("p",[s._v("场景：\n我们已经知道了如何让进程免受 HUP 信号的影响，但是如果有大量这种命令需要在稳定的后台里运行，如何避免对每条命令都做这样的操作呢？")]),s._v(" "),n("p",[s._v("解决方法：\n此时最方便的方法就是 screen 了。简单的说，screen 提供了 ANSI/VT100 的终端模拟器，使它能够在一个真实终端下运行多个全屏的伪终端。screen 的参数很多，具有很强大的功能，我们在此仅介绍其常用功能以及简要分析一下为什么使用 screen 能够避免 HUP 信号的影响。我们先看一下 screen 的帮助信息：")]),s._v(" "),n("p",[n("code",[s._v("SCREEN(1) SCREEN(1)NAME screen - screen manager with VT100/ANSI terminal emulationSYNOPSIS screen [ -options ] cmd [ args ] ] screen -r [[pid.]tty[.host]] screen -r sessionowner/[[pid.]tty[.host]]DESCRIPTION Screen is a full-screen window manager that multiplexes a physical terminal between several processes (typically interactive shells). Each virtual terminal provides the functions of a DEC VT100 terminal and, in addition, several control functions from the ISO 6429 (ECMA 48, ANSI X3.64) and ISO 2022 standards (e.g. insert/delete line and support for multiple character sets). There is a scrollback history buffer for each virtual terminal and a copy-and-paste mechanism that allows moving text regions between windows.")])]),s._v(" "),n("p",[s._v("使用 screen 很方便，有以下几个常用选项：")]),s._v(" "),n("p",[s._v("● 用 screen -dmS session name 来建立一个处于断开模式下的会话（并指定其会话名）。\n● 用 screen -list 来列出所有会话。\n● 用 screen -r session name 来重新连接指定会话。\n● 用快捷键 CTRL-a d 来暂时断开当前会话。")]),s._v(" "),n("h3",{attrs:{id:"screen-示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#screen-示例","aria-hidden":"true"}},[s._v("#")]),s._v(" screen 示例")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# screen -dmS Urumchi")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# screen -list")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("There is a screen on: 12842.Urumchi (Detached)\n1 Socket in /tmp/screens/S-root.")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# screen -r Urumchi")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("当我们用“-r”连接到 screen 会话后，我们就可以在这个伪终端里面为所欲为，再也不用担心 HUP 信号会对我们的进程造成影响，也不用给每个命令前都加上“nohup”或者“setsid”了。这是为什么呢？让我来看一下下面两个例子吧。")]),s._v(" "),n("ol",[n("li",[s._v("未使用 screen 时新进程的进程树")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# ping www.google.com &")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 9499\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# pstree -H 9499")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("我们可以看出，未使用 screen 时我们所处的 bash 是 sshd 的子进程，当 ssh 断开连接时，HUP 信号自然会影响到它下面的所有子进程（包括我们新建立的 ping 进程）。")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("使用了 screen 后新进程的进程树")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# screen -r Urumchi")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# ping www.ibm.com &")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("1"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 9488\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@pvcent107 ~"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token comment"}},[s._v("# pstree -H 9488")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("而使用了 screen 后就不同了，此时 bash 是 screen 的子进程，而 screen 是 init（PID 为 1）的子进程。那么当 ssh 断开连接时，HUP 信号自然不会影响到 screen 下面的子进程了。")])])}],!1,null,null,null);e.options.__file="linux进程后台运行的几种方法.md";t.default=e.exports}}]);